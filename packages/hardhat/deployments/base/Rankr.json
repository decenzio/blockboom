{
  "address": "0x202aA761C9988A511746bE468DFAA950C122390e",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyRanked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "DuplicateIndex",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "IndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidItem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ItemsFull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoDirectETH",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayoutFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrancy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        }
      ],
      "name": "WrongEntryFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum Rankr.Phase",
          "name": "expected",
          "type": "uint8"
        },
        {
          "internalType": "enum Rankr.Phase",
          "name": "current",
          "type": "uint8"
        }
      ],
      "name": "WrongPhase",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "adder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addedAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "author",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "ItemAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8[3]",
          "name": "order",
          "type": "uint8[3]"
        }
      ],
      "name": "RankingSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerWinner",
          "type": "uint256"
        }
      ],
      "name": "RoundCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RoundReset",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ENTRY_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PLAYERS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_ITEMS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            }
          ],
          "internalType": "struct Rankr.ItemInput",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "addItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "adder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Rankr.Item[3]",
          "name": "",
          "type": "tuple[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "items",
      "outputs": [
        {
          "internalType": "string",
          "name": "author",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "adder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "itemsCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "phase",
      "outputs": [
        {
          "internalType": "enum Rankr.Phase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "order",
          "type": "uint8[3]"
        }
      ],
      "name": "rankItems",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0d56e1286f0fcd077d06ab28b656838bec382693ce3071439a58842c4bd8fdb1",
  "receipt": {
    "to": null,
    "from": "0x005B6bE90759B9Ac673cA2a03dC7Fc69A0959d28",
    "contractAddress": "0x202aA761C9988A511746bE468DFAA950C122390e",
    "transactionIndex": 252,
    "gasUsed": "1654956",
    "logsBloom": "0x
    "blockHash": "0x0eeb79b5a8b7e4fcfa3b604079fedf379323bb0295f20819d0ac1905425bf708",
    "transactionHash": "0x0d56e1286f0fcd077d06ab28b656838bec382693ce3071439a58842c4bd8fdb1",
    "logs": [],
    "blockNumber": 37015705,
    "cumulativeGasUsed": "50868811",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5e22eab1fd46de5d6d0e7c8475836921",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyRanked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"DuplicateIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidItem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ItemsFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDirectETH\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrancy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"}],\"name\":\"WrongEntryFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum Rankr.Phase\",\"name\":\"expected\",\"type\":\"uint8\"},{\"internalType\":\"enum Rankr.Phase\",\"name\":\"current\",\"type\":\"uint8\"}],\"name\":\"WrongPhase\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"ItemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[3]\",\"name\":\"order\",\"type\":\"uint8[3]\"}],\"name\":\"RankingSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerWinner\",\"type\":\"uint256\"}],\"name\":\"RoundCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RoundReset\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ENTRY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PLAYERS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_ITEMS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"internalType\":\"struct Rankr.ItemInput\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentItems\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"adder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Rankr.Item[3]\",\"name\":\"\",\"type\":\"tuple[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"adder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemsCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"enum Rankr.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"order\",\"type\":\"uint8[3]\"}],\"name\":\"rankItems\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Functionality preserved; refactored with custom errors, modifiers, NatSpec and reentrancy guard.\",\"kind\":\"dev\",\"methods\":{\"addItem((string,string,string))\":{\"details\":\"Reverts when not in CollectingItems phase, when items are full, or input is invalid.\",\"params\":{\"item\":\"Author, title and url of the item to add.\"}},\"getCurrentItems()\":{\"returns\":{\"_0\":\"The fixed-size array of items of length NUM_ITEMS.\"}},\"getPlayers()\":{\"returns\":{\"_0\":\"The dynamic list of player addresses.\"}},\"getPrizePool()\":{\"returns\":{\"_0\":\"The prize pool balance.\"}},\"rankItems(uint8[3])\":{\"details\":\"Reverts when not in CollectingRanks phase, wrong ETH value, or sender already ranked.\",\"params\":{\"order\":\"A permutation of [0..NUM_ITEMS-1] from best to worst.\"}}},\"title\":\"Rank5 Autonomous Game\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addItem((string,string,string))\":{\"notice\":\"Add an item with author, title and url until NUM_ITEMS exist, then switch to ranking phase.\"},\"getCurrentItems()\":{\"notice\":\"Returns the items proposed for the current round.\"},\"getPlayers()\":{\"notice\":\"Returns the addresses of players who have ranked in the current round so far.\"},\"getPrizePool()\":{\"notice\":\"Returns the current prize pool (in wei) accumulated for the round.\"},\"rankItems(uint8[3])\":{\"notice\":\"Submit ranking (best\\u2192worst) for the current round by paying exactly ENTRY_FEE wei.\"}},\"notice\":\"Repeated rounds game with {NUM_ITEMS} items and up to {MAX_PLAYERS} players per round.         Each ranking submission requires exactly {ENTRY_FEE} wei. On reaching {MAX_PLAYERS} players:           1) Compute cumulative ranking via Borda count           2) Identify player(s) whose order matches the final order most closely           3) Split and pay the prize pool among winners (first gets remainder)           4) Reset state for the next round\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Rankr.sol\":\"Rankr\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Rankr.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\n/**\\n * @title Rank5 Autonomous Game\\n * @notice Repeated rounds game with {NUM_ITEMS} items and up to {MAX_PLAYERS} players per round.\\n *         Each ranking submission requires exactly {ENTRY_FEE} wei. On reaching {MAX_PLAYERS} players:\\n *           1) Compute cumulative ranking via Borda count\\n *           2) Identify player(s) whose order matches the final order most closely\\n *           3) Split and pay the prize pool among winners (first gets remainder)\\n *           4) Reset state for the next round\\n * @dev Functionality preserved; refactored with custom errors, modifiers, NatSpec and reentrancy guard.\\n */\\ncontract Rankr {\\n    uint256 public constant ENTRY_FEE = 1e13; // 0.0001 ETH\\n    uint8   public constant NUM_ITEMS = 3;\\n    uint8   public constant MAX_PLAYERS = 8;\\n\\n    enum Phase { CollectingItems, CollectingRanks }\\n    Phase public phase = Phase.CollectingItems;\\n\\n    // --------- Errors ---------\\n    error WrongPhase(Phase expected, Phase current);\\n    error ItemsFull();\\n    error InvalidItem();\\n    error WrongEntryFee(uint256 provided);\\n    error AlreadyRanked();\\n    error IndexOutOfRange(uint8 index);\\n    error DuplicateIndex(uint8 index);\\n    error PayoutFailed(address to, uint256 amount);\\n    error NoDirectETH();\\n    error Reentrancy();\\n\\n    struct Item {\\n        string author;\\n        string title;\\n        string url;\\n        address adder;\\n        uint256 addedAt;\\n    }\\n\\n    struct ItemInput {\\n        string author;\\n        string title;\\n        string url;\\n    }\\n\\n    Item[NUM_ITEMS] public items;\\n    uint8 public itemsCount;\\n\\n    address[] public players;\\n    mapping(address => uint8[NUM_ITEMS]) private rankings;\\n\\n    uint256 public prizePool;\\n\\n    // Reentrancy guard (lightweight)\\n    bool private _entered;\\n\\n    event ItemAdded(uint8 indexed index, address indexed adder, uint256 addedAt, string author, string title, string url);\\n    event RankingSubmitted(address indexed player, uint8[NUM_ITEMS] order);\\n    event RoundCompleted(address[] winners, uint256 rewardPerWinner);\\n    event RoundReset();\\n\\n    // --------- Modifiers ---------\\n    modifier inPhase(Phase expected) {\\n        if (phase != expected) revert WrongPhase(expected, phase);\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        if (_entered) revert Reentrancy();\\n        _entered = true;\\n        _;\\n        _entered = false;\\n    }\\n\\n    // --------- External ---------\\n\\n    /// @notice Add an item with author, title and url until NUM_ITEMS exist, then switch to ranking phase.\\n    /// @dev Reverts when not in CollectingItems phase, when items are full, or input is invalid.\\n    /// @param item Author, title and url of the item to add.\\n    function addItem(ItemInput calldata item) external inPhase(Phase.CollectingItems) {\\n        if (itemsCount >= NUM_ITEMS) revert ItemsFull();\\n        if (!_isValidItemInput(item)) revert InvalidItem();\\n\\n        items[itemsCount] = Item({ author: item.author, title: item.title, url: item.url, adder: msg.sender, addedAt: block.timestamp });\\n        emit ItemAdded(itemsCount, msg.sender, block.timestamp, item.author, item.title, item.url);\\n        itemsCount++;\\n\\n        if (itemsCount == NUM_ITEMS) phase = Phase.CollectingRanks;\\n    }\\n\\n    /// @notice Submit ranking (best\\u2192worst) for the current round by paying exactly ENTRY_FEE wei.\\n    /// @dev Reverts when not in CollectingRanks phase, wrong ETH value, or sender already ranked.\\n    /// @param order A permutation of [0..NUM_ITEMS-1] from best to worst.\\n    function rankItems(uint8[NUM_ITEMS] calldata order) external payable inPhase(Phase.CollectingRanks) nonReentrant {\\n        if (msg.value != ENTRY_FEE) revert WrongEntryFee(msg.value);\\n        _validatePermutation(order);\\n\\n        players.push(msg.sender);\\n        rankings[msg.sender] = order;\\n        prizePool += msg.value;\\n\\n        emit RankingSubmitted(msg.sender, order);\\n\\n        if (players.length == MAX_PLAYERS) {\\n            _finalizeRound();\\n        }\\n    }\\n\\n    // --------- View helpers ---------\\n\\n    /// @notice Returns the items proposed for the current round.\\n    /// @return The fixed-size array of items of length NUM_ITEMS.\\n    function getCurrentItems() external view returns (Item[NUM_ITEMS] memory) {\\n        return items;\\n    }\\n\\n    /// @notice Returns the addresses of players who have ranked in the current round so far.\\n    /// @return The dynamic list of player addresses.\\n    function getPlayers() external view returns (address[] memory) {\\n        return players;\\n    }\\n\\n    /// @notice Returns the current prize pool (in wei) accumulated for the round.\\n    /// @return The prize pool balance.\\n    function getPrizePool() external view returns (uint256) {\\n        return prizePool;\\n    }\\n\\n    // --------- Internal logic ---------\\n\\n    function _finalizeRound() internal {\\n        // --- 1. Compute cumulative item scores (Borda count) ---\\n        uint16[NUM_ITEMS] memory scores;\\n        for (uint8 p = 0; p < MAX_PLAYERS; p++) {\\n            uint8[NUM_ITEMS] memory order = rankings[players[p]];\\n            for (uint8 pos = 0; pos < NUM_ITEMS; pos++) {\\n                scores[order[pos]] += uint16(NUM_ITEMS - pos); // NUM_ITEMS..1 pts\\n            }\\n        }\\n\\n        // --- 2. Sort items by total score to get final order ---\\n        uint8[NUM_ITEMS] memory finalOrder;\\n        for (uint8 i = 0; i < NUM_ITEMS; i++) {\\n            finalOrder[i] = i;\\n        }\\n        for (uint8 i = 0; i < NUM_ITEMS; i++) {\\n            uint8 best = i;\\n            for (uint8 j = i + 1; j < NUM_ITEMS; j++) {\\n                if (scores[finalOrder[j]] > scores[finalOrder[best]]) best = j;\\n            }\\n            (finalOrder[i], finalOrder[best]) = (finalOrder[best], finalOrder[i]);\\n        }\\n\\n        // --- 3. Score each player by how many positions match ---\\n        uint8 maxMatch = 0;\\n        address[] memory tmp = new address[](MAX_PLAYERS);\\n        uint8 winCount = 0;\\n\\n        for (uint8 p = 0; p < MAX_PLAYERS; p++) {\\n            uint8[NUM_ITEMS] memory ord = rankings[players[p]];\\n            uint8 matches = 0;\\n            for (uint8 k = 0; k < NUM_ITEMS; k++)\\n                if (ord[k] == finalOrder[k]) matches++;\\n\\n            if (matches > maxMatch) {\\n                maxMatch = matches;\\n                winCount = 1;\\n                tmp[0] = players[p];\\n            } else if (matches == maxMatch) {\\n                tmp[winCount++] = players[p];\\n            }\\n        }\\n\\n        // --- 4. Pay winners equally ---\\n        address[] memory winners = new address[](winCount);\\n        for (uint8 i = 0; i < winCount; i++) winners[i] = tmp[i];\\n        uint256 poolBeforePayout = prizePool;\\n        uint256 reward = poolBeforePayout / winCount;\\n        uint256 totalBase = reward * winCount;\\n        uint256 remainder = poolBeforePayout - totalBase;\\n        prizePool = 0; // CEI: zero before external calls\\n\\n        for (uint8 i = 0; i < winCount; i++) {\\n            uint256 amount = reward + (i == 0 ? remainder : 0);\\n            (bool ok, ) = winners[i].call{value: amount}(\\\"\\\");\\n            if (!ok) revert PayoutFailed(winners[i], amount);\\n        }\\n\\n        emit RoundCompleted(winners, reward);\\n\\n        // --- 5. Reset state for next round ---\\n        _resetState();\\n    }\\n\\n    function _resetState() internal {\\n        for (uint8 i = 0; i < NUM_ITEMS; i++) {\\n            items[i] = Item({ author: \\\"\\\", title: \\\"\\\", url: \\\"\\\", adder: address(0), addedAt: 0 });\\n        }\\n        itemsCount = 0;\\n\\n        for (uint8 i = 0; i < players.length; i++) {\\n            delete rankings[players[i]];\\n        }\\n        delete players;\\n        prizePool = 0;\\n        phase = Phase.CollectingItems;\\n\\n        emit RoundReset();\\n    }\\n\\n    // --------- Utils ---------\\n\\n    function _isValidItemInput(ItemInput calldata item) internal pure returns (bool) {\\n        if (bytes(item.author).length == 0) return false;\\n        if (bytes(item.title).length == 0) return false;\\n        if (bytes(item.url).length == 0) return false;\\n        return true;\\n    }\\n\\n    function _validatePermutation(uint8[NUM_ITEMS] calldata order) internal pure {\\n        bool[NUM_ITEMS] memory seen;\\n        for (uint8 i = 0; i < NUM_ITEMS; i++) {\\n            uint8 v = order[i];\\n            if (v >= NUM_ITEMS) revert IndexOutOfRange(v);\\n            if (seen[v]) revert DuplicateIndex(v);\\n            seen[v] = true;\\n        }\\n    }\\n\\n    /// @dev No direct ETH transfers accepted.\\n    receive() external payable { revert NoDirectETH(); }\\n\\n    /// @dev No function selectors supported; reject unknown calls and ETH via fallback path.\\n    fallback() external payable { revert NoDirectETH(); }\\n}\",\"keccak256\":\"0x921675f7eefe3a5e79c8c2a6b2eccddc6750aaf60a950f60b549ca2cb4368178\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Functionality preserved; refactored with custom errors, modifiers, NatSpec and reentrancy guard.",
    "kind": "dev",
    "methods": {
      "addItem((string,string,string))": {
        "details": "Reverts when not in CollectingItems phase, when items are full, or input is invalid.",
        "params": {
          "item": "Author, title and url of the item to add."
        }
      },
      "getCurrentItems()": {
        "returns": {
          "_0": "The fixed-size array of items of length NUM_ITEMS."
        }
      },
      "getPlayers()": {
        "returns": {
          "_0": "The dynamic list of player addresses."
        }
      },
      "getPrizePool()": {
        "returns": {
          "_0": "The prize pool balance."
        }
      },
      "rankItems(uint8[3])": {
        "details": "Reverts when not in CollectingRanks phase, wrong ETH value, or sender already ranked.",
        "params": {
          "order": "A permutation of [0..NUM_ITEMS-1] from best to worst."
        }
      }
    },
    "title": "Rank5 Autonomous Game",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addItem((string,string,string))": {
        "notice": "Add an item with author, title and url until NUM_ITEMS exist, then switch to ranking phase."
      },
      "getCurrentItems()": {
        "notice": "Returns the items proposed for the current round."
      },
      "getPlayers()": {
        "notice": "Returns the addresses of players who have ranked in the current round so far."
      },
      "getPrizePool()": {
        "notice": "Returns the current prize pool (in wei) accumulated for the round."
      },
      "rankItems(uint8[3])": {
        "notice": "Submit ranking (best→worst) for the current round by paying exactly ENTRY_FEE wei."
      }
    },
    "notice": "Repeated rounds game with {NUM_ITEMS} items and up to {MAX_PLAYERS} players per round.         Each ranking submission requires exactly {ENTRY_FEE} wei. On reaching {MAX_PLAYERS} players:           1) Compute cumulative ranking via Borda count           2) Identify player(s) whose order matches the final order most closely           3) Split and pay the prize pool among winners (first gets remainder)           4) Reset state for the next round",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19,
        "contract": "contracts/Rankr.sol:Rankr",
        "label": "phase",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(Phase)14"
      },
      {
        "astId": 78,
        "contract": "contracts/Rankr.sol:Rankr",
        "label": "items",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Item)66_storage)3_storage"
      },
      {
        "astId": 80,
        "contract": "contracts/Rankr.sol:Rankr",
        "label": "itemsCount",
        "offset": 0,
        "slot": "16",
        "type": "t_uint8"
      },
      {
        "astId": 83,
        "contract": "contracts/Rankr.sol:Rankr",
        "label": "players",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 89,
        "contract": "contracts/Rankr.sol:Rankr",
        "label": "rankings",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_array(t_uint8)3_storage)"
      },
      {
        "astId": 91,
        "contract": "contracts/Rankr.sol:Rankr",
        "label": "prizePool",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 93,
        "contract": "contracts/Rankr.sol:Rankr",
        "label": "_entered",
        "offset": 0,
        "slot": "20",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Item)66_storage)3_storage": {
        "base": "t_struct(Item)66_storage",
        "encoding": "inplace",
        "label": "struct Rankr.Item[3]",
        "numberOfBytes": "480"
      },
      "t_array(t_uint8)3_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Phase)14": {
        "encoding": "inplace",
        "label": "enum Rankr.Phase",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint8)3_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint8)3_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Item)66_storage": {
        "encoding": "inplace",
        "label": "struct Rankr.Item",
        "members": [
          {
            "astId": 57,
            "contract": "contracts/Rankr.sol:Rankr",
            "label": "author",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 59,
            "contract": "contracts/Rankr.sol:Rankr",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 61,
            "contract": "contracts/Rankr.sol:Rankr",
            "label": "url",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 63,
            "contract": "contracts/Rankr.sol:Rankr",
            "label": "adder",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 65,
            "contract": "contracts/Rankr.sol:Rankr",
            "label": "addedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}