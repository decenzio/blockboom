{
  "address": "0x323CFF611A10443E79b7D97689d073e631daacB7",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyRanked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "DuplicateIndex",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "IndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidItem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ItemsFull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoDirectETH",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayoutFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrancy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        }
      ],
      "name": "WrongEntryFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum Rank5Game.Phase",
          "name": "expected",
          "type": "uint8"
        },
        {
          "internalType": "enum Rank5Game.Phase",
          "name": "current",
          "type": "uint8"
        }
      ],
      "name": "WrongPhase",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "adder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addedAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "author",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "ItemAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8[3]",
          "name": "order",
          "type": "uint8[3]"
        }
      ],
      "name": "RankingSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerWinner",
          "type": "uint256"
        }
      ],
      "name": "RoundCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RoundReset",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ENTRY_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PLAYERS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_ITEMS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            }
          ],
          "internalType": "struct Rank5Game.ItemInput",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "addItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "adder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Rank5Game.Item[3]",
          "name": "",
          "type": "tuple[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasRanked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "items",
      "outputs": [
        {
          "internalType": "string",
          "name": "author",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "adder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "itemsCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "phase",
      "outputs": [
        {
          "internalType": "enum Rank5Game.Phase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "order",
          "type": "uint8[3]"
        }
      ],
      "name": "rankItems",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x16218b8eadea76128a47b3759821575047285b591b8580a76b1b220273d8bd12",
  "receipt": {
    "to": null,
    "from": "0xF1488Df4E38E7F506851F60f944c91E2Ea393C56",
    "contractAddress": "0x323CFF611A10443E79b7D97689d073e631daacB7",
    "transactionIndex": 88,
    "gasUsed": "1713877",
    "logsBloom": "0x
    "blockHash": "0x7ba76fac2421ef43a0550c0ae1564afed128bada380b0c551c8b23b4e7655e9e",
    "transactionHash": "0x16218b8eadea76128a47b3759821575047285b591b8580a76b1b220273d8bd12",
    "logs": [],
    "blockNumber": 9437922,
    "cumulativeGasUsed": "14031440",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "34acc83b3812cb6d11114f479c568222",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyRanked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"DuplicateIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidItem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ItemsFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDirectETH\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrancy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"}],\"name\":\"WrongEntryFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum Rank5Game.Phase\",\"name\":\"expected\",\"type\":\"uint8\"},{\"internalType\":\"enum Rank5Game.Phase\",\"name\":\"current\",\"type\":\"uint8\"}],\"name\":\"WrongPhase\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"ItemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[3]\",\"name\":\"order\",\"type\":\"uint8[3]\"}],\"name\":\"RankingSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerWinner\",\"type\":\"uint256\"}],\"name\":\"RoundCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RoundReset\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ENTRY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PLAYERS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_ITEMS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"internalType\":\"struct Rank5Game.ItemInput\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentItems\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"adder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Rank5Game.Item[3]\",\"name\":\"\",\"type\":\"tuple[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasRanked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"adder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemsCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"enum Rank5Game.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"order\",\"type\":\"uint8[3]\"}],\"name\":\"rankItems\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Functionality preserved; refactored with custom errors, modifiers, NatSpec and reentrancy guard.\",\"kind\":\"dev\",\"methods\":{\"addItem((string,string,string))\":{\"details\":\"Reverts when not in CollectingItems phase, when items are full, or input is invalid.\",\"params\":{\"item\":\"Author, title and url of the item to add.\"}},\"getCurrentItems()\":{\"returns\":{\"_0\":\"The fixed-size array of items of length NUM_ITEMS.\"}},\"getPlayers()\":{\"returns\":{\"_0\":\"The dynamic list of player addresses.\"}},\"getPrizePool()\":{\"returns\":{\"_0\":\"The prize pool balance.\"}},\"rankItems(uint8[3])\":{\"details\":\"Reverts when not in CollectingRanks phase, wrong ETH value, or sender already ranked.\",\"params\":{\"order\":\"A permutation of [0..NUM_ITEMS-1] from best to worst.\"}}},\"title\":\"Rank5 Autonomous Game\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addItem((string,string,string))\":{\"notice\":\"Add an item with author, title and url until NUM_ITEMS exist, then switch to ranking phase.\"},\"getCurrentItems()\":{\"notice\":\"Returns the items proposed for the current round.\"},\"getPlayers()\":{\"notice\":\"Returns the addresses of players who have ranked in the current round so far.\"},\"getPrizePool()\":{\"notice\":\"Returns the current prize pool (in wei) accumulated for the round.\"},\"rankItems(uint8[3])\":{\"notice\":\"Submit ranking (best\\u2192worst) for the current round by paying exactly ENTRY_FEE wei.\"}},\"notice\":\"Repeated rounds game with {NUM_ITEMS} items and up to {MAX_PLAYERS} players per round.         Each ranking submission requires exactly {ENTRY_FEE} wei. On reaching {MAX_PLAYERS} players:           1) Compute cumulative ranking via Borda count           2) Identify player(s) whose order matches the final order most closely           3) Split and pay the prize pool among winners (first gets remainder)           4) Reset state for the next round\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Rank5Game.sol\":\"Rank5Game\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Rank5Game.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\n/**\\n * @title Rank5 Autonomous Game\\n * @notice Repeated rounds game with {NUM_ITEMS} items and up to {MAX_PLAYERS} players per round.\\n *         Each ranking submission requires exactly {ENTRY_FEE} wei. On reaching {MAX_PLAYERS} players:\\n *           1) Compute cumulative ranking via Borda count\\n *           2) Identify player(s) whose order matches the final order most closely\\n *           3) Split and pay the prize pool among winners (first gets remainder)\\n *           4) Reset state for the next round\\n * @dev Functionality preserved; refactored with custom errors, modifiers, NatSpec and reentrancy guard.\\n */\\ncontract Rank5Game {\\n    uint256 public constant ENTRY_FEE = 1e15; // 0.001 ETH\\n    uint8   public constant NUM_ITEMS = 3;\\n    uint8   public constant MAX_PLAYERS = 2;\\n\\n    enum Phase { CollectingItems, CollectingRanks }\\n    Phase public phase = Phase.CollectingItems;\\n\\n    // --------- Errors ---------\\n    error WrongPhase(Phase expected, Phase current);\\n    error ItemsFull();\\n    error InvalidItem();\\n    error WrongEntryFee(uint256 provided);\\n    error AlreadyRanked();\\n    error IndexOutOfRange(uint8 index);\\n    error DuplicateIndex(uint8 index);\\n    error PayoutFailed(address to, uint256 amount);\\n    error NoDirectETH();\\n    error Reentrancy();\\n\\n    struct Item {\\n        string author;\\n        string title;\\n        string url;\\n        address adder;\\n        uint256 addedAt;\\n    }\\n\\n    struct ItemInput {\\n        string author;\\n        string title;\\n        string url;\\n    }\\n\\n    Item[NUM_ITEMS] public items;\\n    uint8 public itemsCount;\\n\\n    address[] public players;\\n    mapping(address => uint8[NUM_ITEMS]) private rankings;\\n    mapping(address => bool) public hasRanked;\\n\\n    uint256 public prizePool;\\n\\n    // Reentrancy guard (lightweight)\\n    bool private _entered;\\n\\n    event ItemAdded(uint8 indexed index, address indexed adder, uint256 addedAt, string author, string title, string url);\\n    event RankingSubmitted(address indexed player, uint8[NUM_ITEMS] order);\\n    event RoundCompleted(address[] winners, uint256 rewardPerWinner);\\n    event RoundReset();\\n\\n    // --------- Modifiers ---------\\n    modifier inPhase(Phase expected) {\\n        if (phase != expected) revert WrongPhase(expected, phase);\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        if (_entered) revert Reentrancy();\\n        _entered = true;\\n        _;\\n        _entered = false;\\n    }\\n\\n    // --------- External ---------\\n\\n    /// @notice Add an item with author, title and url until NUM_ITEMS exist, then switch to ranking phase.\\n    /// @dev Reverts when not in CollectingItems phase, when items are full, or input is invalid.\\n    /// @param item Author, title and url of the item to add.\\n    function addItem(ItemInput calldata item) external inPhase(Phase.CollectingItems) {\\n        if (itemsCount >= NUM_ITEMS) revert ItemsFull();\\n        if (!_isValidItemInput(item)) revert InvalidItem();\\n\\n        items[itemsCount] = Item({ author: item.author, title: item.title, url: item.url, adder: msg.sender, addedAt: block.timestamp });\\n        emit ItemAdded(itemsCount, msg.sender, block.timestamp, item.author, item.title, item.url);\\n        itemsCount++;\\n\\n        if (itemsCount == NUM_ITEMS) phase = Phase.CollectingRanks;\\n    }\\n\\n    /// @notice Submit ranking (best\\u2192worst) for the current round by paying exactly ENTRY_FEE wei.\\n    /// @dev Reverts when not in CollectingRanks phase, wrong ETH value, or sender already ranked.\\n    /// @param order A permutation of [0..NUM_ITEMS-1] from best to worst.\\n    function rankItems(uint8[NUM_ITEMS] calldata order) external payable inPhase(Phase.CollectingRanks) nonReentrant {\\n        if (msg.value != ENTRY_FEE) revert WrongEntryFee(msg.value);\\n        if (hasRanked[msg.sender]) revert AlreadyRanked();\\n        _validatePermutation(order);\\n\\n        players.push(msg.sender);\\n        hasRanked[msg.sender] = true;\\n        rankings[msg.sender] = order;\\n        prizePool += msg.value;\\n\\n        emit RankingSubmitted(msg.sender, order);\\n\\n        if (players.length == MAX_PLAYERS) {\\n            _finalizeRound();\\n        }\\n    }\\n\\n    // --------- View helpers ---------\\n\\n    /// @notice Returns the items proposed for the current round.\\n    /// @return The fixed-size array of items of length NUM_ITEMS.\\n    function getCurrentItems() external view returns (Item[NUM_ITEMS] memory) {\\n        return items;\\n    }\\n\\n    /// @notice Returns the addresses of players who have ranked in the current round so far.\\n    /// @return The dynamic list of player addresses.\\n    function getPlayers() external view returns (address[] memory) {\\n        return players;\\n    }\\n\\n    /// @notice Returns the current prize pool (in wei) accumulated for the round.\\n    /// @return The prize pool balance.\\n    function getPrizePool() external view returns (uint256) {\\n        return prizePool;\\n    }\\n\\n    // --------- Internal logic ---------\\n\\n    function _finalizeRound() internal {\\n        // --- 1. Compute cumulative item scores (Borda count) ---\\n        uint16[NUM_ITEMS] memory scores;\\n        for (uint8 p = 0; p < MAX_PLAYERS; p++) {\\n            uint8[NUM_ITEMS] memory order = rankings[players[p]];\\n            for (uint8 pos = 0; pos < NUM_ITEMS; pos++) {\\n                scores[order[pos]] += uint16(NUM_ITEMS - pos); // NUM_ITEMS..1 pts\\n            }\\n        }\\n\\n        // --- 2. Sort items by total score to get final order ---\\n        uint8[NUM_ITEMS] memory finalOrder;\\n        for (uint8 i = 0; i < NUM_ITEMS; i++) {\\n            finalOrder[i] = i;\\n        }\\n        for (uint8 i = 0; i < NUM_ITEMS; i++) {\\n            uint8 best = i;\\n            for (uint8 j = i + 1; j < NUM_ITEMS; j++) {\\n                if (scores[finalOrder[j]] > scores[finalOrder[best]]) best = j;\\n            }\\n            (finalOrder[i], finalOrder[best]) = (finalOrder[best], finalOrder[i]);\\n        }\\n\\n        // --- 3. Score each player by how many positions match ---\\n        uint8 maxMatch = 0;\\n        address[] memory tmp = new address[](MAX_PLAYERS);\\n        uint8 winCount = 0;\\n\\n        for (uint8 p = 0; p < MAX_PLAYERS; p++) {\\n            uint8[NUM_ITEMS] memory ord = rankings[players[p]];\\n            uint8 matches = 0;\\n            for (uint8 k = 0; k < NUM_ITEMS; k++)\\n                if (ord[k] == finalOrder[k]) matches++;\\n\\n            if (matches > maxMatch) {\\n                maxMatch = matches;\\n                winCount = 1;\\n                tmp[0] = players[p];\\n            } else if (matches == maxMatch) {\\n                tmp[winCount++] = players[p];\\n            }\\n        }\\n\\n        // --- 4. Pay winners equally ---\\n        address[] memory winners = new address[](winCount);\\n        for (uint8 i = 0; i < winCount; i++) winners[i] = tmp[i];\\n        uint256 poolBeforePayout = prizePool;\\n        uint256 reward = poolBeforePayout / winCount;\\n        uint256 totalBase = reward * winCount;\\n        uint256 remainder = poolBeforePayout - totalBase;\\n        prizePool = 0; // CEI: zero before external calls\\n\\n        for (uint8 i = 0; i < winCount; i++) {\\n            uint256 amount = reward + (i == 0 ? remainder : 0);\\n            (bool ok, ) = winners[i].call{value: amount}(\\\"\\\");\\n            if (!ok) revert PayoutFailed(winners[i], amount);\\n        }\\n\\n        emit RoundCompleted(winners, reward);\\n\\n        // --- 5. Reset state for next round ---\\n        _resetState();\\n    }\\n\\n    function _resetState() internal {\\n        for (uint8 i = 0; i < NUM_ITEMS; i++) {\\n            items[i] = Item({ author: \\\"\\\", title: \\\"\\\", url: \\\"\\\", adder: address(0), addedAt: 0 });\\n        }\\n        itemsCount = 0;\\n\\n        for (uint8 i = 0; i < players.length; i++) {\\n            delete hasRanked[players[i]];\\n            delete rankings[players[i]];\\n        }\\n        delete players;\\n        prizePool = 0;\\n        phase = Phase.CollectingItems;\\n\\n        emit RoundReset();\\n    }\\n\\n    // --------- Utils ---------\\n\\n    function _isValidItemInput(ItemInput calldata item) internal pure returns (bool) {\\n        if (bytes(item.author).length == 0) return false;\\n        if (bytes(item.title).length == 0) return false;\\n        if (bytes(item.url).length == 0) return false;\\n        return true;\\n    }\\n\\n    function _validatePermutation(uint8[NUM_ITEMS] calldata order) internal pure {\\n        bool[NUM_ITEMS] memory seen;\\n        for (uint8 i = 0; i < NUM_ITEMS; i++) {\\n            uint8 v = order[i];\\n            if (v >= NUM_ITEMS) revert IndexOutOfRange(v);\\n            if (seen[v]) revert DuplicateIndex(v);\\n            seen[v] = true;\\n        }\\n    }\\n\\n    /// @dev No direct ETH transfers accepted.\\n    receive() external payable { revert NoDirectETH(); }\\n\\n    /// @dev No function selectors supported; reject unknown calls and ETH via fallback path.\\n    fallback() external payable { revert NoDirectETH(); }\\n}\",\"keccak256\":\"0x95da8929784340d7adeb5e8740f7f8ec0b69f59c523dad9e56128a90aa8b4b59\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c80638b5b9ccc1161007f578063e2c03ace11610059578063e2c03ace14610292578063f5e96011146102ac578063f6d361cc146102c1578063f71d96cb146102dc576100ff565b80638b5b9ccc14610218578063b1c9fe6e1461023a578063bfb231d214610261576100ff565b80634411b3eb116100bb5780634411b3eb146101a5578063719ce73e146101cc578063839e48de146101f0578063884bf67c14610203576100ff565b80633bc330d214610118578063409c7f2e14610143578063428cebe214610183576100ff565b366100ff57604051631021348160e01b815260040160405180910390fd5b604051631021348160e01b815260040160405180910390fd5b34801561012457600080fd5b5061012d610314565b60405161013a91906117ac565b60405180910390f35b34801561014f57600080fd5b5061017361015e366004611857565b60136020526000908152604090205460ff1681565b604051901515815260200161013a565b34801561018f57600080fd5b506101a361019e366004611887565b610539565b005b3480156101b157600080fd5b506101ba600281565b60405160ff909116815260200161013a565b3480156101d857600080fd5b506101e260145481565b60405190815260200161013a565b6101a36101fe3660046118c2565b610802565b34801561020f57600080fd5b506014546101e2565b34801561022457600080fd5b5061022d6109bb565b60405161013a919061192f565b34801561024657600080fd5b506000546102549060ff1681565b60405161013a919061197a565b34801561026d57600080fd5b5061028161027c36600461198e565b610a1d565b60405161013a9594939291906119a7565b34801561029e57600080fd5b506010546101ba9060ff1681565b3480156102b857600080fd5b506101ba600381565b3480156102cd57600080fd5b506101e266038d7ea4c6800081565b3480156102e857600080fd5b506102fc6102f736600461198e565b610bf6565b6040516001600160a01b03909116815260200161013a565b61031c61161c565b6040805160608101909152600160036000835b82821015610530578382600502016040518060a0016040529081600082018054610358906119fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610384906119fe565b80156103d15780601f106103a6576101008083540402835291602001916103d1565b820191906000526020600020905b8154815290600101906020018083116103b457829003601f168201915b505050505081526020016001820180546103ea906119fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610416906119fe565b80156104635780601f1061043857610100808354040283529160200191610463565b820191906000526020600020905b81548152906001019060200180831161044657829003601f168201915b5050505050815260200160028201805461047c906119fe565b80601f01602080910402602001604051908101604052809291908181526020018280546104a8906119fe565b80156104f55780601f106104ca576101008083540402835291602001916104f5565b820191906000526020600020905b8154815290600101906020018083116104d857829003601f168201915b505050918352505060038201546001600160a01b0316602080830191909152600490920154604090910152908252600192909201910161032f565b50505050905090565b60008060005460ff16600181111561055357610553611942565b14610585576000546040516305fb5e1b60e01b815261057c91839160ff90911690600401611a32565b60405180910390fd5b601054600360ff909116106105ad576040516358fbefcb60e11b815260040160405180910390fd5b6105b682610c20565b6105d3576040516327b3518960e11b815260040160405180910390fd5b6040805160a08101909152806105e98480611a4d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060209081019061063290850185611a4d565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016106796040850185611a4d565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252503360208201524260409091015260105460019060ff16600381106106d6576106d6611a9b565b6005020160008201518160000190816106ef9190611b17565b50602082015160018201906107049082611b17565b50604082015160028201906107199082611b17565b5060608201516003820180546001600160a01b0319166001600160a01b03909216919091179055608090910151600490910155601054339060ff167ff3e72e6ae6e80c6ba9ec05a6258f20828c52f8122333e93bf8ba4cc1a55da61e426107808680611a4d565b61078d6020890189611a4d565b61079a60408b018b611a4d565b6040516107ad9796959493929190611c00565b60405180910390a36010805460ff169060006107c883611c66565b82546101009290920a60ff818102199093169183160217909155601054166002190190506107fe576000805460ff191660011790555b5050565b60018060005460ff16600181111561081c5761081c611942565b14610845576000546040516305fb5e1b60e01b815261057c91839160ff90911690600401611a32565b60155460ff16156108695760405163558a1e0360e11b815260040160405180910390fd5b6015805460ff191660011790553466038d7ea4c680001461089f57604051630517287f60e41b815234600482015260240161057c565b3360009081526013602052604090205460ff16156108d05760405163090282b960e41b815260040160405180910390fd5b6108d982610c81565b6011805460018181019092557f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680180546001600160a01b031916339081179091556000908152601360209081526040808320805460ff191690941790935560129052206109489083600361167c565b50346014600082825461095b9190611c85565b909155505060405133907ff2af8c8b3986f97978f8f6dc47b3290511328d1293569de75e6e3f88702d0ad990610992908590611cae565b60405180910390a2601154600119016109ad576109ad610d59565b50506015805460ff19169055565b60606011805480602002602001604051908101604052809291908181526020018280548015610a1357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f5575b5050505050905090565b60018160038110610a2d57600080fd5b6005020180549091508190610a41906119fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6d906119fe565b8015610aba5780601f10610a8f57610100808354040283529160200191610aba565b820191906000526020600020905b815481529060010190602001808311610a9d57829003601f168201915b505050505090806001018054610acf906119fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610afb906119fe565b8015610b485780601f10610b1d57610100808354040283529160200191610b48565b820191906000526020600020905b815481529060010190602001808311610b2b57829003601f168201915b505050505090806002018054610b5d906119fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610b89906119fe565b8015610bd65780601f10610bab57610100808354040283529160200191610bd6565b820191906000526020600020905b815481529060010190602001808311610bb957829003601f168201915b50505050600383015460049093015491926001600160a01b031691905085565b60118181548110610c0657600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610c2c8280611a4d565b9050600003610c3d57506000919050565b610c4a6020830183611a4d565b9050600003610c5b57506000919050565b610c686040830183611a4d565b9050600003610c7957506000919050565b506001919050565b610c89611712565b60005b600360ff82161015610d54576000838260ff1660038110610caf57610caf611a9b565b602002016020810190610cc29190611cea565b9050600360ff821610610ced5760405163515a45e760e11b815260ff8216600482015260240161057c565b828160ff1660038110610d0257610d02611a9b565b602002015115610d2a57604051631fd2e8a560e31b815260ff8216600482015260240161057c565b6001838260ff1660038110610d4157610d41611a9b565b9115156020909202015250600101610c8c565b505050565b610d61611712565b60005b600260ff82161015610e715760006012600060118460ff1681548110610d8c57610d8c611a9b565b6000918252602080832091909101546001600160a01b0316835282019290925260409081018220815160608101928390529290916003918390855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610dc75790505050505050905060005b600360ff82161015610e6757610e16816003611d05565b60ff1684838360ff1660038110610e2f57610e2f611a9b565b602002015160ff1660038110610e4757610e47611a9b565b60200201818151610e589190611d1e565b61ffff16905250600101610dff565b5050600101610d64565b50610e7a611712565b60005b600360ff82161015610eb45780828260ff1660038110610e9f57610e9f611a9b565b60ff9092166020929092020152600101610e7d565b5060005b600360ff82161015610fe157806000610ed2826001611d40565b90505b600360ff82161015610f615784848360ff1660038110610ef757610ef7611a9b565b602002015160ff1660038110610f0f57610f0f611a9b565b602002015161ffff1685858360ff1660038110610f2e57610f2e611a9b565b602002015160ff1660038110610f4657610f46611a9b565b602002015161ffff161115610f59578091505b600101610ed5565b50828160ff1660038110610f7757610f77611a9b565b6020020151838360ff1660038110610f9157610f91611a9b565b6020020151848460ff1660038110610fab57610fab611a9b565b60200201858460ff1660038110610fc457610fc4611a9b565b60ff93841660209190910291909101529116905250600101610eb8565b50604080516002808252606082018352600092839291906020830190803683370190505090506000805b600260ff821610156112035760006012600060118460ff168154811061103357611033611a9b565b6000918252602080832091909101546001600160a01b0316835282019290925260409081018220815160608101928390529290916003918390855b825461010083900a900460ff1681526020600192830181810494850194909303909202910180841161106e579050505050505090506000805b600360ff8216101561110857878160ff16600381106110c8576110c8611a9b565b602002015160ff16838260ff16600381106110e5576110e5611a9b565b602002015160ff160361110057816110fc81611c66565b9250505b6001016110a7565b508560ff168160ff161115611180578095506001935060118360ff168154811061113457611134611a9b565b600091825260208220015486516001600160a01b0390911691879161115b5761115b611a9b565b60200260200101906001600160a01b031690816001600160a01b0316815250506111f9565b8560ff168160ff16036111f95760118360ff16815481106111a3576111a3611a9b565b6000918252602090912001546001600160a01b031685856111c381611c66565b965060ff16815181106111d8576111d8611a9b565b60200260200101906001600160a01b031690816001600160a01b0316815250505b505060010161100b565b5060008160ff1667ffffffffffffffff81111561122257611222611ab1565b60405190808252806020026020018201604052801561124b578160200160208202803683370190505b50905060005b8260ff168160ff1610156112b157838160ff168151811061127457611274611a9b565b6020026020010151828260ff168151811061129157611291611a9b565b6001600160a01b0390921660209283029190910190910152600101611251565b5060145460006112c460ff851683611d59565b905060006112d560ff861683611d7b565b905060006112e38285611d92565b600060148190559091505b8660ff168160ff1610156113ea57600060ff82161561130e576000611310565b825b61131a9086611c85565b90506000878360ff168151811061133357611333611a9b565b60200260200101516001600160a01b03168260405160006040518083038185875af1925050503d8060008114611385576040519150601f19603f3d011682016040523d82523d6000602084013e61138a565b606091505b50509050806113e057878360ff16815181106113a8576113a8611a9b565b60200260200101518260405163e3e9273560e01b815260040161057c9291906001600160a01b03929092168252602082015260400190565b50506001016112ee565b507fc4529ca7a8ea53caec7963aa9e414cc63526c15c578b114b9315e80fd7eec666858460405161141c929190611da5565b60405180910390a161142c611438565b50505050505050505050565b60005b600360ff82161015611523576040805160c081018252600060a082018181528252825160208181018552828252808401919091528351908101845281815292820192909252606081018290526080810191909152600160ff8316600381106114a5576114a5611a9b565b6005020160008201518160000190816114be9190611b17565b50602082015160018201906114d39082611b17565b50604082015160028201906114e89082611b17565b5060608201516003820180546001600160a01b0319166001600160a01b0390921691909117905560809091015160049091015560010161143b565b506010805460ff1916905560005b60115460ff821610156115d7576013600060118360ff168154811061155857611558611a9b565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff1916905560118054601292919060ff85169081106115a0576115a0611a9b565b60009182526020808320909101546001600160a01b03168352820192909252604001812055806115cf81611c66565b915050611531565b506115e460116000611730565b60006014819055805460ff191681556040517f03d7415a8b5c901ab0451507bd934f2971b04632563374d49a1cfef4c8666e5a9190a1565b60405180606001604052806003905b6116666040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001600081525090565b81526020019060019003908161162b5790505090565b6001830191839082156117025791602002820160005b838211156116d357833560ff1683826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302611692565b80156117005782816101000a81549060ff02191690556001016020816000010492830192600103026116d3565b505b5061170e929150611751565b5090565b60405180606001604052806003906020820280368337509192915050565b508054600082559060005260206000209081019061174e9190611751565b50565b5b8082111561170e5760008155600101611752565b6000815180845260005b8181101561178c57602081850181015186830182015201611770565b506000602082860101526020601f19601f83011685010191505092915050565b6020808252600090608083820181850186855b600381101561184a57601f19888403018452815160a081518186526117e682870182611766565b91505087820151858203898701526117fe8282611766565b915050604080830151868303828801526118188382611766565b6060858101516001600160a01b03169089015293890151968901969096525050938601939250908501906001016117bf565b5090979650505050505050565b60006020828403121561186957600080fd5b81356001600160a01b038116811461188057600080fd5b9392505050565b60006020828403121561189957600080fd5b813567ffffffffffffffff8111156118b057600080fd5b82016060818503121561188057600080fd5b6000606082840312156118d457600080fd5b826060830111156118e457600080fd5b50919050565b60008151808452602080850194506020840160005b838110156119245781516001600160a01b0316875295820195908201906001016118ff565b509495945050505050565b60208152600061188060208301846118ea565b634e487b7160e01b600052602160045260246000fd5b6002811061197657634e487b7160e01b600052602160045260246000fd5b9052565b602081016119888284611958565b92915050565b6000602082840312156119a057600080fd5b5035919050565b60a0815260006119ba60a0830188611766565b82810360208401526119cc8188611766565b905082810360408401526119e08187611766565b6001600160a01b039590951660608401525050608001529392505050565b600181811c90821680611a1257607f821691505b6020821081036118e457634e487b7160e01b600052602260045260246000fd5b60408101611a408285611958565b6118806020830184611958565b6000808335601e19843603018112611a6457600080fd5b83018035915067ffffffffffffffff821115611a7f57600080fd5b602001915036819003821315611a9457600080fd5b9250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f821115610d54576000816000526020600020601f850160051c81016020861015611af05750805b601f850160051c820191505b81811015611b0f57828155600101611afc565b505050505050565b815167ffffffffffffffff811115611b3157611b31611ab1565b611b4581611b3f84546119fe565b84611ac7565b602080601f831160018114611b7a5760008415611b625750858301515b600019600386901b1c1916600185901b178555611b0f565b600085815260208120601f198616915b82811015611ba957888601518255948401946001909101908401611b8a565b5085821015611bc75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152608060208201526000611c1a60808301888a611bd7565b8281036040840152611c2d818789611bd7565b90508281036060840152611c42818587611bd7565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103611c7c57611c7c611c50565b60010192915050565b8082018082111561198857611988611c50565b803560ff81168114611ca957600080fd5b919050565b60608101818360005b6003811015611ce15760ff611ccb83611c98565b1683526020928301929190910190600101611cb7565b50505092915050565b600060208284031215611cfc57600080fd5b61188082611c98565b60ff828116828216039081111561198857611988611c50565b61ffff818116838216019080821115611d3957611d39611c50565b5092915050565b60ff818116838216019081111561198857611988611c50565b600082611d7657634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761198857611988611c50565b8181038181111561198857611988611c50565b604081526000611db860408301856118ea565b9050826020830152939250505056fea264697066735822122086b79aba6d8865166eff2071276daee0742acb0f8bec7087d88c64d72acb948064736f6c63430008190033",
  "devdoc": {
    "details": "Functionality preserved; refactored with custom errors, modifiers, NatSpec and reentrancy guard.",
    "kind": "dev",
    "methods": {
      "addItem((string,string,string))": {
        "details": "Reverts when not in CollectingItems phase, when items are full, or input is invalid.",
        "params": {
          "item": "Author, title and url of the item to add."
        }
      },
      "getCurrentItems()": {
        "returns": {
          "_0": "The fixed-size array of items of length NUM_ITEMS."
        }
      },
      "getPlayers()": {
        "returns": {
          "_0": "The dynamic list of player addresses."
        }
      },
      "getPrizePool()": {
        "returns": {
          "_0": "The prize pool balance."
        }
      },
      "rankItems(uint8[3])": {
        "details": "Reverts when not in CollectingRanks phase, wrong ETH value, or sender already ranked.",
        "params": {
          "order": "A permutation of [0..NUM_ITEMS-1] from best to worst."
        }
      }
    },
    "title": "Rank5 Autonomous Game",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addItem((string,string,string))": {
        "notice": "Add an item with author, title and url until NUM_ITEMS exist, then switch to ranking phase."
      },
      "getCurrentItems()": {
        "notice": "Returns the items proposed for the current round."
      },
      "getPlayers()": {
        "notice": "Returns the addresses of players who have ranked in the current round so far."
      },
      "getPrizePool()": {
        "notice": "Returns the current prize pool (in wei) accumulated for the round."
      },
      "rankItems(uint8[3])": {
        "notice": "Submit ranking (best→worst) for the current round by paying exactly ENTRY_FEE wei."
      }
    },
    "notice": "Repeated rounds game with {NUM_ITEMS} items and up to {MAX_PLAYERS} players per round.         Each ranking submission requires exactly {ENTRY_FEE} wei. On reaching {MAX_PLAYERS} players:           1) Compute cumulative ranking via Borda count           2) Identify player(s) whose order matches the final order most closely           3) Split and pay the prize pool among winners (first gets remainder)           4) Reset state for the next round",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19,
        "contract": "contracts/Rank5Game.sol:Rank5Game",
        "label": "phase",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(Phase)14"
      },
      {
        "astId": 78,
        "contract": "contracts/Rank5Game.sol:Rank5Game",
        "label": "items",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Item)66_storage)3_storage"
      },
      {
        "astId": 80,
        "contract": "contracts/Rank5Game.sol:Rank5Game",
        "label": "itemsCount",
        "offset": 0,
        "slot": "16",
        "type": "t_uint8"
      },
      {
        "astId": 83,
        "contract": "contracts/Rank5Game.sol:Rank5Game",
        "label": "players",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 89,
        "contract": "contracts/Rank5Game.sol:Rank5Game",
        "label": "rankings",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_array(t_uint8)3_storage)"
      },
      {
        "astId": 93,
        "contract": "contracts/Rank5Game.sol:Rank5Game",
        "label": "hasRanked",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 95,
        "contract": "contracts/Rank5Game.sol:Rank5Game",
        "label": "prizePool",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 97,
        "contract": "contracts/Rank5Game.sol:Rank5Game",
        "label": "_entered",
        "offset": 0,
        "slot": "21",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Item)66_storage)3_storage": {
        "base": "t_struct(Item)66_storage",
        "encoding": "inplace",
        "label": "struct Rank5Game.Item[3]",
        "numberOfBytes": "480"
      },
      "t_array(t_uint8)3_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Phase)14": {
        "encoding": "inplace",
        "label": "enum Rank5Game.Phase",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint8)3_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint8)3_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Item)66_storage": {
        "encoding": "inplace",
        "label": "struct Rank5Game.Item",
        "members": [
          {
            "astId": 57,
            "contract": "contracts/Rank5Game.sol:Rank5Game",
            "label": "author",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 59,
            "contract": "contracts/Rank5Game.sol:Rank5Game",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 61,
            "contract": "contracts/Rank5Game.sol:Rank5Game",
            "label": "url",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 63,
            "contract": "contracts/Rank5Game.sol:Rank5Game",
            "label": "adder",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 65,
            "contract": "contracts/Rank5Game.sol:Rank5Game",
            "label": "addedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}